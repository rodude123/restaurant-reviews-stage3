var dbPromise;class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static openDB(){return navigator.serviceWorker?idb.open("restaurants",3,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"restaurant_id"});case 2:e.createObjectStore("oflineReviews",{keyPath:"restaurant_id"})}}):Promise.resolve()}static getCachedData(){return dbPromise||(dbPromise=DBHelper.openDB()),dbPromise.then(function(e){if(e)return e.transaction("restaurants").objectStore("restaurants").getAll()})}static getCachedReviews(){return dbPromise||(dbPromise=DBHelper.openDatabase()),dbPromise.then(function(e){return e?e.transaction("reviews").objectStore("reviews").getAll():e})}static fetchRestaurants(e){DBHelper.getCachedData().then(function(t){if(t.length>0&&!navigator.onLine)return e(null,t);fetch(DBHelper.DATABASE_URL+"restaurants",{credentials:"same-origin"}).then(e=>e.json()).then(t=>(dbPromise.then(function(e){if(e){var r=e.transaction("restaurants","readwrite").objectStore("restaurants");t.forEach(e=>r.put(e)),r.openCursor(null,"prev").then(function(e){return e.advance(50)}).then(function e(t){if(t)return t.delete(),t.continue().then(e)})}}),e(null,t))).catch(t=>e(t,null))})}static fetchReviewsById(e){return new Promise((t,r)=>{DBHelper.getCachedReviews().then(function(n){n.length>0&&!navigator.onLine&&t(n[0]),fetch(`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${e}`).then(e=>{if(e.ok)return e.json();r(new Error(`Request failed, status code: ${e.status}`))}).then(e=>{DBHelper.updateReview(e),t(e)})})})}static updateReview(e){dbPromise||(dbPromise=DBHelper.openDB()),dbPromise.then(function(t){if(!t)return t;var r=t.transaction("reviews","readwrite"),n=r.objectStore("reviews");return e.length>0&&(e.restaurant_id=parseInt(e[0].restaurant_id),n.put(e)),r.complete})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static addRemFav(e,t,r,n){const a=r.is_favorite;DBHelper.handleFav(a,e,r).then(function(){t.classList.contains("isNotFav")?(t.classList.replace("isNotFav","isFav"),t.setAttribute("aria-label","Remove favourites"),t.setAttribute("aria-checked","true"),n.innerHTML="Remove from favourites"):(t.classList.replace("isFav","isNotFav"),t.setAttribute("aria-label","Add to favourite"),t.setAttribute("aria-checked","false"),n.innerHTML="Add to favourites")})}static storeOflineReview(e,t,r,n){const a={restaurant_id:e,name:t,rating:n,comments:r};dbPromise||(dbPromise=DBHelper.openDB()),dbPromise.then(function(e){if(e){var t=e.transaction("oflineReviews","readwrite");return t.objectStore("oflineReviews").put(a),t.complete}})}static handleFav(e,t,r){return"string"==typeof e?"false"==e?(e=!0,r.is_favorite=!0):"true"==e&&(e=!1,r.is_favorite=!1):e=!e,dbPromise||(dbPromise=DBHelper.openDB()),dbPromise.then(function(e){if(!e){var t=e.transaction("restaurants","readwrite");return t.objectStore("restaurants").put(r),t.complete}}),new Promise((r,n)=>{fetch(`${DBHelper.DATABASE_URL}restaurants/${t}/?is_favorite=${e}`,{method:"PUT"}).then(e=>{if(e.ok)return e.json();n(new Error(`Request is not successful. Status code is :  ${e.status}`))}).then(e=>{r(e)})})}static postReview(e,t,r,n,a){let i={};return i="string"==typeof r?{restaurant_id:e,name:t,rating:n,comments:r}:{restaurant_id:e,name:t,rating:r,comments:n},new Promise((e,t)=>{fetch(`${DBHelper.DATABASE_URL}reviews`,{method:"POST",body:JSON.stringify(i)}).then(function(e){if(e.ok)return e.clone().json();t(new Error(`Request failed with status code : ${e.status}`))}).then(t=>{a.push(t),DBHelper.updateReview(a),e(t)})})}static postOflineReview(e,t){return new Promise((r,n)=>{dbPromise||(dbPromise=DBHelper.openDB()),dbPromise.then(function(t){if(t)return t.transaction("oflineReviews").objectStore("oflineReviews").get(e)}).then(function(n){DBHelper.postReview(n.restaurant_id,n.name,n.rating,n.comments,t).then(t=>{dbPromise.then(function(t){var r=t.transaction("oflineReviews","readwrite");return r.objectStore("oflineReviews").delete(e),r.complete}),r(t)})})})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/imgRes/${e.photograph}-`}static imageAltForRestaurant(e){return`${e.alt}`}static buttonLabel(e){return e.bLabel}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}
//# sourceMappingURL=dbhelper.js.map