{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","name","aLazy","className","href","imageUrlForRestaurant","image","src","alt","arialabel","address","more","urlForRestaurant","setAttribute","fav","is_favorite","style","cssFloat","tooltip","addRemFav","id","marker","mapMarkerForRestaurant","addListener","location","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => \r\n{\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => \r\n{\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => \r\n    {\r\n        if (error) \r\n        {\r\n          // Got an error\r\n          console.error(error);\r\n        }\r\n        else \r\n        {\r\n          self.neighborhoods = neighborhoods;\r\n          fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => \r\n{\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => \r\n    {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => \r\n{\r\n    DBHelper.fetchCuisines((error, cuisines) => \r\n    {\r\n        if (error) \r\n        { \r\n          // Got an error!\r\n          console.error(error);\r\n        } \r\n        else \r\n        {\r\n          self.cuisines = cuisines;\r\n          fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => \r\n{\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => \r\n    {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => \r\n{\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), \r\n    {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => \r\n{\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => \r\n    {\r\n        if (error) \r\n        { // Got an error!\r\n          console.error(error);\r\n        }\r\n        else \r\n        {\r\n          resetRestaurants(restaurants);\r\n          fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => \r\n{\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => \r\n{\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => \r\n{\r\n    var li = document.createElement('li');\r\n\r\n    var name = document.createElement('h2');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    var aLazy = document.createElement('a');\r\n    aLazy.className = 'progressive replace';\r\n    aLazy.href = DBHelper.imageUrlForRestaurant(restaurant) + '400.webp';\r\n    //aLazy.href = '/imgRes/lazy.webp';\r\n\r\n    var image = document.createElement('img');\r\n    image.className = 'restaurant-img preview';\r\n    image.src = `/imgRes/lazy.webp`;\r\n    image.alt = 'Loading image';\r\n\r\n    if (restaurant.name == \"Mission Chinese Food\") \r\n    {\r\n        image.alt = \"People sitting inside Mission Chinese Food\";\r\n        image.arialabel = \"People sitting inside Mission Chinese Food\";\r\n    }\r\n    else if (restaurant.name == \"Kang Ho Dong Baekjeong\") \r\n    {\r\n        image.alt = \"Empty restaurant with orange looking tables and chairs angled more towards the left\";\r\n        image.arialabel = \"Empty restaurant with orange looking tables and chairs angled more towards the left\";\r\n    }\r\n    else if (restaurant.name == \"Katz's Delicatessen\") \r\n    {\r\n        image.alt = \"Outside night photo of the restaurant\";\r\n        image.arialabel = \"Outside night photo of the restaurant\";\r\n    } \r\n    else if (restaurant.name == \"Roberta's Pizza\") \r\n    {\r\n        image.alt = \"People sitting inside Roberta's Pizza\";\r\n        image.arialabel = \"People sitting inside Roberta's Pizza\";\r\n    } \r\n    else if (restaurant.name == \"Hometown BBQ\") \r\n    {\r\n        image.alt = \"American themed restaurant with people sitting inside\";\r\n        image.arialabel = \"American themed restaurant with people sitting inside\";\r\n    } \r\n    else if (restaurant.name == \"Superiority Burger\") \r\n    {\r\n        image.alt = \"Black and white photo of the outside of the Superiority Burger restaurant and with people inside\";\r\n        image.arialabel = \"Black and white photo of the outside of the Superiority Burger restaurant and with people inside\";\r\n    } \r\n    else if (restaurant.name == \"The Dutch\") \r\n    {\r\n        image.alt = \"Close up view of the outside of the restaurant\";\r\n        image.arialabel = \"Close up view of the outside of the restaurant\";\r\n    }\r\n    else if (restaurant.name == \"Mu Ramen\") \r\n    {\r\n        image.alt = \"Slightly blured black and white photo of people sitting and eating\";\r\n        image.arialabel = \"Slightly blured black and white photo of people sitting and eating\";\r\n    } \r\n    else if (restaurant.name == \"Casa Enrique\") \r\n    {\r\n        aLazy.href = \"/imgRes/10-400.webp\";\r\n        image.alt = \"Empty restaurant with tables and chairs angled towards the left\";\r\n        image.arialabel = \"Empty restaurant with tables and chairs angled towards the left\";\r\n    }\r\n\r\n    aLazy.append(image);\r\n    li.append(aLazy);\r\n    li.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    li.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    li.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    more.className = \"restaurant\";\r\n    more.setAttribute('aria-label', `View Details for ${restaurant.name}`);\r\n    const fav = document.createElement('a');\r\n    fav.innerHTML = '&#9733;';\r\n    //fav.id = \"addToFav\";\r\n    if (restaurant.is_favorite == \"true\")\r\n    {\r\n        fav.className = \"tooltip isFav\";\r\n    }\r\n    else\r\n    {\r\n        fav.className = \"tooltip isNotFav\";\r\n    }\r\n    fav.setAttribute('aria-label', \"Add to favourite\");\r\n    fav.style.cssFloat = \"right\";\r\n    const tooltip = document.createElement('span');\r\n    tooltip.className = 'tooltiptext';\r\n    tooltip.innerHTML = 'Add to favourites';\r\n    tooltip.setAttribute('role', \"alertdialog\")\r\n    fav.setAttribute('role' , 'switch');\r\n    fav.append(tooltip);\r\n    fav.addEventListener(\"click\", function() \r\n    {\r\n        DBHelper.addRemFav(restaurant.id, fav, restaurant, tooltip);\r\n    });\r\n\r\n    li.append(fav);\r\n    li.append(more);\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => \r\n{\r\n    restaurants.forEach(restaurant => \r\n    {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => \r\n        {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}\r\n"]}