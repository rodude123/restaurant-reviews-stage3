{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","map","c1","c2","c3","c4","window","initMap","fetchRestaurantFromURL","error","console","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","name","address","aLazy","className","href","imageUrlForRestaurant","setAttribute","image","alt","arialabel","fav","createElement","is_favorite","style","marginLeft","tooltip","append","addEventListener","addRemFav","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","e","preventDefault","checkReview","reviews","operatingHours","hours","key","row","day","appendChild","time","container","title","fetchReviewsById","parseInt","then","length","noReviews","ul","forEach","review","createReviewHTML","updatedAt","restId","strip","value","reviewBody","rating","querySelector","navigator","onLine","postReview","display","showMessage","storeOflineReview","interval","setInterval","clearInterval","postOflineReview","li","header","rDate","date","Date","toDateString","boldRating","comments","breadcrumb","message","url","location","replace","results","RegExp","exec","decodeURIComponent","string"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\nlet c1 = 0;\r\nlet c2 = 0;\r\nlet c3 = 0;\r\nlet c4 = 0;\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => \r\n{\r\n    fetchRestaurantFromURL((error, restaurant) => \r\n    {\r\n        if (error) \r\n        { \r\n          // Got an error!\r\n          console.error(error);\r\n        } \r\n        else \r\n        {\r\n          self.map = new google.maps.Map(document.getElementById('map'), \r\n          {\r\n            zoom: 16,\r\n            center: restaurant.latlng,\r\n            scrollwheel: false\r\n          });\r\n          if (c1 == 0) \r\n          {\r\n            fillBreadcrumb();\r\n            c1 = 1;\r\n          }\r\n          DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => \r\n{\r\n    if (self.restaurant) \r\n    {\r\n        // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) \r\n    { \r\n        // no id found in URL\r\n        error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } \r\n    else \r\n    {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => \r\n        {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) \r\n            {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            if (c2 == 0) \r\n            {\r\n                fillRestaurantHTML();\r\n                c2 = 1;\r\n            }\r\n            callback(null, restaurant)\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => \r\n{\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const aLazy = document.getElementById('aLazy');\r\n    aLazy.className = \"progressive replace\";\r\n    aLazy.href = DBHelper.imageUrlForRestaurant(restaurant) + '800.webp';\r\n    aLazy.setAttribute(\"data-srcset\", `${DBHelper.imageUrlForRestaurant(restaurant)}300.webp 400w, ${DBHelper.imageUrlForRestaurant(restaurant)}400.webp 600w, ${DBHelper.imageUrlForRestaurant(restaurant)}600.webp 800w, ${DBHelper.imageUrlForRestaurant(restaurant)}800.webp 1200w`);\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img preview';\r\n    if (restaurant.name == \"Mission Chinese Food\") \r\n    {\r\n        image.alt = \"People sitting inside Mission Chinese Food\";\r\n        image.arialabel = \"People sitting inside Mission Chinese Food\";\r\n    }\r\n    else if (restaurant.name == \"Kang Ho Dong Baekjeong\") \r\n    {\r\n        image.alt = \"Empty restaurant with orange looking tables and chairs angled more towards the left\";\r\n        image.arialabel = \"Empty restaurant with orange looking tables and chairs angled more towards the left\";\r\n    }\r\n    else if (restaurant.name == \"Katz's Delicatessen\") \r\n    {\r\n        image.alt = \"Outside night photo of the restaurant\";\r\n        image.arialabel = \"Outside night photo of the restaurant\";\r\n    } \r\n    else if (restaurant.name == \"Roberta's Pizza\") \r\n    {\r\n        image.alt = \"People sitting inside Roberta's Pizza\";\r\n        image.arialabel = \"People sitting inside Roberta's Pizza\";\r\n    } \r\n    else if (restaurant.name == \"Hometown BBQ\") \r\n    {\r\n        image.alt = \"American themed restaurant with people sitting inside\";\r\n        image.arialabel = \"American themed restaurant with people sitting inside\";\r\n    } \r\n    else if (restaurant.name == \"Superiority Burger\") \r\n    {\r\n        image.alt = \"Black and white photo of the outside of the Superiority Burger restaurant and with people inside\";\r\n        image.arialabel = \"Black and white photo of the outside of the Superiority Burger restaurant and with people inside\";\r\n    } \r\n    else if (restaurant.name == \"The Dutch\") \r\n    {\r\n        image.alt = \"Close up view of the outside of the restaurant\";\r\n        image.arialabel = \"Close up view of the outside of the restaurant\";\r\n    }\r\n    else if (restaurant.name == \"Mu Ramen\") \r\n    {\r\n        image.alt = \"Slightly blured black and white photo of people sitting and eating\";\r\n        image.arialabel = \"Slightly blured black and white photo of people sitting and eating\";\r\n    } \r\n    else if (restaurant.name == \"Casa Enrique\") \r\n    {\r\n        aLazy.href = \"/imgRes/10-400.webp\";\r\n        aLazy.setAttribute(\"data-srcset\", `/imgRes/10-300.webp 400w, /imgRes/10-400.webp 600w, /imgRes/10-600.webp 800w, /imgRes/10-800.webp 1200w`)\r\n        image.alt = \"Empty restaurant with tables and chairs angled towards the left\";\r\n        image.arialabel = \"Empty restaurant with tables and chairs angled towards the left\";\r\n    }\r\n\r\n\r\n    const fav = document.createElement('a');\r\n    fav.innerHTML = '&#9733;';\r\n    fav.id = \"addToFav\";\r\n    if (restaurant.is_favorite == \"true\")\r\n    {\r\n        fav.className = \"tooltip isFav\";\r\n    }\r\n    else\r\n    {\r\n        fav.className = \"tooltip isNotFav\";\r\n    }\r\n    fav.setAttribute('aria-label', \"Add to favourite\");\r\n    fav.style.marginLeft = \"100px\";\r\n    const tooltip = document.createElement('span');\r\n    tooltip.className = 'tooltiptext';\r\n    tooltip.innerHTML = 'Add to favourites';\r\n    fav.setAttribute('role' , 'switch');\r\n    fav.append(tooltip);\r\n    fav.addEventListener(\"click\", function() \r\n    {\r\n        DBHelper.addRemFav(restaurant.id, fav, restaurant, tooltip);\r\n    });\r\n    document.getElementById(\"favContainer\").append(fav);\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) \r\n    {\r\n        if (c3 == 0) \r\n        {\r\n            fillRestaurantHoursHTML();\r\n            c3 = 1;\r\n        }\r\n    }\r\n    // fill reviews\r\n    if (c4 == 0) \r\n    {\r\n        fillReviewsHTML(restaurant);\r\n        document.getElementById(\"reviewForm\").addEventListener(\"submit\", (e) =>\r\n        {\r\n            e.preventDefault();\r\n            checkReview(getParameterByName(\"id\"), restaurant.reviews); \r\n        });\r\n        c4 = 1;\r\n    }\r\n  \r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => \r\n{\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) \r\n  {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (restaurant) => \r\n{\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h3');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n    DBHelper.fetchReviewsById(parseInt(getParameterByName('id'))).then((reviews) => \r\n    {        \r\n        if (reviews.length == 0) \r\n        {\r\n            const noReviews = document.createElement('p');\r\n            noReviews.innerHTML = 'No reviews yet. Be the first one!';\r\n            container.appendChild(noReviews);\r\n        }\r\n        else\r\n        {\r\n            restaurant.reviews = reviews;        \r\n            ul = document.getElementById('reviews-list');\r\n            reviews.forEach(review => \r\n            {\r\n                ul.appendChild(createReviewHTML(review, review.updatedAt));\r\n            });\r\n            container.appendChild(ul);\r\n        }\r\n  });\r\n}\r\n\r\ncheckReview = (restId, reviews) =>\r\n{\r\n    const name = strip(document.getElementById('name').value);\r\n    const reviewBody = strip(document.getElementById('reviewBody').value);\r\n    const rating  = parseInt(document.querySelector(`input[name=\"rating\"]:checked`).value);\r\n    if (!navigator.onLine) \r\n    {\r\n        showMessage(\"It seems your ofline right now, the review will be sent when your online later\");\r\n        document.getElementById('reviewModal').style.display = \"none\";\r\n        DBHelper.storeOflineReview(parseInt(restId), name, reviewBody, rating);\r\n        let interval = setInterval(() => \r\n        {                    \r\n            if (navigator.onLine) \r\n            {\r\n                clearInterval(interval);\r\n                showMessage(\"Attempting to add review\");\r\n                DBHelper.postOflineReview(parseInt(restId), reviews).then(review => \r\n                {\r\n                    document.getElementById('reviews-list').appendChild(createReviewHTML(review));\r\n                    showMessage(\"Review now added\");\r\n                });\r\n            }\r\n        } , 5000);\r\n    }\r\n    else\r\n    {\r\n        DBHelper.postReview(parseInt(restId), name, rating, reviewBody, reviews).then(review =>\r\n        {\r\n            document.getElementById('reviewModal').style.display = \"none\";\r\n            document.getElementById('reviews-list').appendChild(createReviewHTML(review, review.updatedAt));\r\n            showMessage(\"Review added\");\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review, updatedAt) => \r\n{\r\n    const li = document.createElement('li');\r\n    li.className = \"review\"\r\n    const header = document.createElement('div');\r\n    header.className = \"reviewHeader mainContainer\";\r\n    li.appendChild(header);\r\n\r\n    const name = document.createElement('p');\r\n    name.className = \"name reviewHeaderContent\";\r\n    name.innerHTML = review.name;\r\n    header.appendChild(name);\r\n\r\n    const rDate = updatedAt;\r\n    const date = document.createElement('p');\r\n    date.className = \"date reviewHeaderContent\";\r\n    date.innerHTML = new Date(rDate).toDateString();\r\n    header.appendChild(date);\r\n\r\n    const rating = document.createElement('div');\r\n    const boldRating = document.createElement('strong');\r\n    rating.className = \"rating\";\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    boldRating.appendChild(rating);\r\n    li.appendChild(boldRating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant=self.restaurant) => \r\n{\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Shows message when something happens like review upload\r\n */\r\n\r\nshowMessage = (message) =>\r\n{\r\n    document.getElementById(\"modalMessage\").innerHTML = message;\r\n    document.getElementById('messageModal').style.display = \"block\";\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => \r\n{\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n/**\r\n * Strip HTML Tags i.e remove them.\r\n */\r\nstrip = (string) => \r\n{\r\n  return string.replace(/(<([^>]+)>)/ig,\"\");\r\n}"]}