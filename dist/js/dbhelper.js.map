{"version":3,"sources":["dbhelper.js"],"names":["dbPromise","DBHelper","DATABASE_URL","[object Object]","navigator","serviceWorker","idb","open","upgradeDb","oldVersion","createObjectStore","keyPath","Promise","resolve","openDB","then","db","transaction","objectStore","getAll","openDatabase","callback","getCachedData","data","length","onLine","fetch","credentials","rest","json","store","forEach","restaurant","put","openCursor","cur","advance","delRest","delete","continue","catch","err","id","reject","getCachedReviews","response","ok","Error","status","updateReview","reviews","tx","restaurant_id","parseInt","complete","fetchRestaurants","error","restaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","restId","fav","tooltip","isFav","is_favorite","handleFav","classList","contains","replace","setAttribute","innerHTML","name","reviewBody","rating","post","comments","method","res","body","JSON","stringify","clone","push","get","review","postReview","cuisines","uniqueCuisines","photograph","alt","bLabel","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"AAGA,IAAIA,gBACEC,SAMFC,0BAEI,MAAO,yBAMXC,gBAEI,OAAKC,UAAUC,cAIRC,IAAIC,KAAK,cAAgB,EAAI,SAASC,GACzC,OAAOA,EAAUC,YAEf,KAAK,EACLD,EAAUE,kBAAkB,eAAgBC,QAAS,OACrD,KAAK,EACLH,EAAUE,kBAAkB,WAAYC,QAAS,kBACjD,KAAK,EACLH,EAAUE,kBAAkB,iBAAkBC,QAAS,qBAVlDC,QAAQC,UAiBvBV,uBAMI,OAJKH,YAEDA,UAAYC,SAASa,UAElBd,UAAUe,KAAK,SAASC,GAE3B,GAAKA,EAML,OAFSA,EAAGC,YAAY,eACTC,YAAY,eACdC,WAMrBhB,0BAMI,OAJIH,YAEAA,UAAYC,SAASmB,gBAElBpB,UAAUe,KAAK,SAASC,GAE3B,OAAIA,EACKA,EAAGC,YAAY,WACTC,YAAY,WACdC,SAHEH,IAUvBb,wBAAwBkB,GAEpBpB,SAASqB,gBAAgBP,KAAK,SAASQ,GAEnC,GAAIA,EAAKC,OAAS,IAAMpB,UAAUqB,OAEhC,OAAOJ,EAAS,KAAME,GAExBG,MAAMzB,SAASC,aAAa,eAAgByB,YAAY,gBAAgBZ,KAAKa,GAAQA,EAAKC,QAAQd,KAAKQ,IACnGvB,UAAUe,KAAK,SAASC,GAEpB,GAAKA,EAAL,CAEA,IACIc,EADKd,EAAGC,YAAY,cAAe,aACxBC,YAAY,eAE3BK,EAAKQ,QAAQC,GAAcF,EAAMG,IAAID,IAGrCF,EAAMI,WAAW,KAAM,QAAQnB,KAAK,SAASoB,GAEzC,OAAOA,EAAIC,QAAQ,MACpBrB,KAAK,SAASsB,EAAQF,GAErB,GAAKA,EAEL,OADAA,EAAIG,SACGH,EAAII,WAAWxB,KAAKsB,QAG5BhB,EAAS,KAAME,KACvBiB,MAAMC,GAAcpB,EAASoB,EAAK,SAO7CtC,wBAAwBuC,GAEpB,OAAO,IAAI9B,QAAQ,CAACC,EAAS8B,KAEzB1C,SAAS2C,mBAAmB7B,KAAK,SAASQ,GAGnCA,EAAKC,OAAS,IAAMpB,UAAUqB,QAE/BZ,EAAQU,EAAK,IAGfG,SAASzB,SAASC,sCAAsCwC,KAAM3B,KAAK8B,IAE/D,GAAGA,EAASC,GAER,OAAOD,EAAShB,OAEpBc,EAAO,IAAII,sCAAsCF,EAASG,aAC3DjC,KAAKQ,IAGJtB,SAASgD,aAAa1B,GACtBV,EAAQU,SASxBpB,oBAAoB+C,GAEXlD,YAEDA,UAAYC,SAASa,UAGzBd,UAAUe,KAAK,SAASC,GAGpB,IAAIA,EAAI,OAAOA,EACf,IAAImC,EAAKnC,EAAGC,YAAY,UAAY,aAChCa,EAAQqB,EAAGjC,YAAY,WAM3B,OALGgC,EAAQ1B,OAAS,IAEhB0B,EAAQE,cAAgBC,SAASH,EAAQ,GAAGE,eAC5CtB,EAAMG,IAAIiB,IAEPC,EAAGG,WAOlBnD,2BAA2BuC,EAAIrB,GAG3BpB,SAASsD,iBAAiB,CAACC,EAAOC,KAEhC,GAAID,EAEFnC,EAASmC,EAAO,UAGlB,CACE,MAAMxB,EAAayB,EAAYC,KAAKC,GAAKA,EAAEjB,IAAMA,GAC7CV,EAEFX,EAAS,KAAMW,GAIfX,EAAS,4BAA6B,SAShDlB,gCAAgCyD,EAASvC,GAGrCpB,SAASsD,iBAAiB,CAACC,EAAOC,KAE9B,GAAID,EAEAnC,EAASmC,EAAO,UAGpB,CAEI,MAAMK,EAAUJ,EAAYK,OAAOH,GAAKA,EAAEI,cAAgBH,GAC1DvC,EAAS,KAAMwC,MAQ3B1D,qCAAqC6D,EAAc3C,GAG/CpB,SAASsD,iBAAiB,CAACC,EAAOC,KAE9B,GAAID,EAEAnC,EAASmC,EAAO,UAGpB,CAEI,MAAMK,EAAUJ,EAAYK,OAAOH,GAAKA,EAAEK,cAAgBA,GAC1D3C,EAAS,KAAMwC,MAQ3B1D,+CAA+CyD,EAASI,EAAc3C,GAElEpB,SAASsD,iBAAiB,CAACC,EAAOC,KAC9B,GAAID,EAEAnC,EAASmC,EAAO,UAGpB,CACI,IAAIK,EAAUJ,EACC,OAAXG,IAGAC,EAAUA,EAAQC,OAAOH,GAAKA,EAAEI,cAAgBH,IAEhC,OAAhBI,IAGAH,EAAUA,EAAQC,OAAOH,GAAKA,EAAEK,cAAgBA,IAEpD3C,EAAS,KAAMwC,MAQ3B1D,0BAA0BkB,GAEtBpB,SAASsD,iBAAiB,CAACC,EAAOC,KAE9B,GAAID,EAEAnC,EAASmC,EAAO,UAGpB,CAEI,MAAMS,EAAgBR,EAAYS,IAAI,CAACC,EAAGC,IAAMX,EAAYW,GAAGJ,cAEzDK,EAAsBJ,EAAcH,OAAO,CAACK,EAAGC,IAAMH,EAAcK,QAAQH,IAAMC,GACvF/C,EAAS,KAAMgD,MAQ3BlE,iBAAiBoE,EAAQC,EAAK5C,EAAM6C,GAEhC,MAAMC,EAAQ9C,EAAK+C,YACnB1E,SAAS2E,UAAUF,EAAOH,EAAQ3C,GAAMb,KAAK,WAErCyD,EAAIK,UAAUC,SAAS,aAEvBN,EAAIK,UAAUE,QAAQ,WAAa,SACnCP,EAAIQ,aAAa,aAAc,qBAC/BR,EAAIQ,aAAa,eAAiB,QAClCP,EAAQQ,UAAY,2BAIpBT,EAAIK,UAAUE,QAAQ,QAAU,YAChCP,EAAIQ,aAAa,aAAc,oBAC/BR,EAAIQ,aAAa,eAAiB,SAClCP,EAAQQ,UAAY,uBAQhC9E,yBAAyBoE,EAAQW,EAAMC,EAAYC,GAE/C,MAAMC,GAAQjC,cAAemB,EAASW,KAAMA,EAAOE,OAAQA,EAASE,SAAUH,GAEzEnF,YAEDA,UAAYC,SAASa,UAGzBd,UAAUe,KAAK,SAASC,GAEpB,GAAIA,EAAJ,CACA,IAAImC,EAAKnC,EAAGC,YAAY,gBAAkB,aAG1C,OAFYkC,EAAGjC,YAAY,iBACrBe,IAAIoD,GACHlC,EAAGG,YAOlBnD,iBAAiBuE,EAAOH,EAAQ3C,GAqC5B,MAnCoB,iBAAX,EAEQ,SAAT8C,GAEAA,GAAQ,EACR9C,EAAK+C,aAAc,GAEL,QAATD,IAELA,GAAQ,EACR9C,EAAK+C,aAAc,GAKzBD,GAASA,EAGN1E,YAEDA,UAAYC,SAASa,UAGzBd,UAAUe,KAAK,SAASC,GAEpB,IAAIA,EAAJ,CAIA,IAAImC,EAAKnC,EAAGC,YAAY,cAAe,aAGvC,OAFYkC,EAAGjC,YAAY,eACrBe,IAAIL,GACHuB,EAAGG,YAGP,IAAI1C,QAAQ,CAACC,EAAU8B,KAE1BjB,SAASzB,SAASC,2BAA2BqE,kBAAuBG,KAEhEa,OAAQ,QACTxE,KAAMyE,IAEL,GAAGA,EAAI1C,GAEH,OAAO0C,EAAI3D,OAIXc,EAAO,IAAII,sDAAsDyC,EAAIxC,aAE1EjC,KAAMQ,IAELV,EAAQU,OAMpBpB,kBAAkBoE,EAASW,EAAOE,EAASD,EAAajC,GAEpD,IAAImC,KASJ,OANIA,EAFiB,iBAAZ,GAEGjC,cAAemB,EAASW,KAAMA,EAAOE,OAAQD,EAAaG,SAAUF,IAIpEhC,cAAemB,EAASW,KAAMA,EAAOE,OAAQA,EAASE,SAAUH,GAErE,IAAIvE,QAAQ,CAACC,EAAU8B,KAE1BjB,SAASzB,SAASC,uBAEdqF,OAAQ,OACRE,KAAMC,KAAKC,UAAUN,KACtBtE,KAAK,SAAS8B,GAEb,GAAGA,EAASC,GAER,OAAOD,EAAS+C,QAAQ/D,OAE5Bc,EAAO,IAAII,2CAA2CF,EAASG,aAChEjC,KAAKQ,IAEJ2B,EAAQ2C,KAAKtE,GACbtB,SAASgD,aAAaC,GACtBrC,EAAQU,OAKpBpB,wBAAwBoE,EAAQrB,GAE5B,OAAO,IAAItC,QAAQ,CAACC,EAAQ8B,KAEpB3C,YAEAA,UAAYC,SAASa,UAEzBd,UAAUe,KAAK,SAASC,GAEpB,GAAIA,EAGJ,OAFSA,EAAGC,YAAY,iBACTC,YAAY,iBACd4E,IAAIvB,KAClBxD,KAAK,SAASgF,GAEjB9F,SAAS+F,WAAWD,EAAO3C,cAAgB2C,EAAOb,KAAOa,EAAOX,OAASW,EAAOT,SAAWpC,GAASnC,KAAKQ,IAErGvB,UAAUe,KAAK,SAASC,GAEpB,IAAImC,EAAKnC,EAAGC,YAAY,gBAAkB,aAG1C,OAFYkC,EAAGjC,YAAY,iBACrBoB,OAAOiC,GACNpB,EAAGG,WAEdzC,EAAQU,SAStBpB,qBAAqBkB,GAEnBpB,SAASsD,iBAAiB,CAACC,EAAOC,KAChC,GAAID,EACFnC,EAASmC,EAAO,UACX,CAEL,MAAMyC,EAAWxC,EAAYS,IAAI,CAACC,EAAGC,IAAMX,EAAYW,GAAGL,cAEpDmC,EAAiBD,EAASnC,OAAO,CAACK,EAAGC,IAAM6B,EAAS3B,QAAQH,IAAMC,GACxE/C,EAAS,KAAM6E,MAQrB/F,wBAAwB6B,GACtB,8BAAgCA,EAAWU,KAM7CvC,6BAA6B6B,GAC3B,iBAAmBA,EAAWmE,cAMhChG,6BAA6B6B,GAC3B,SAAWA,EAAWoE,MAOvBjG,mBAAmB6B,GAClB,OAAOA,EAAWqE,OAKpBlG,8BAA8B6B,EAAYkC,GAQxC,OAPe,IAAIoC,OAAOC,KAAKC,QAC7BC,SAAUzE,EAAW0E,OACrBC,MAAO3E,EAAWkD,KAClB0B,IAAK3G,SAAS4G,iBAAiB7E,GAC/BkC,IAAKA,EACL4C,UAAWR,OAAOC,KAAKQ,UAAUC","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nvar dbPromise;\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n    static get DATABASE_URL() {\r\n        const port = 1337 // Change this to your server port\r\n        return `http://localhost:${port}/`;\r\n    }\r\n\r\n   /**\r\n    * Open Database\r\n    */\r\n    static openDB() \r\n    {\r\n        if (!navigator.serviceWorker) \r\n        {\r\n            return Promise.resolve()\r\n        }\r\n        return idb.open('restaurants' , 3 , function(upgradeDb) {\r\n            switch(upgradeDb.oldVersion) \r\n            {\r\n              case 0:\r\n              upgradeDb.createObjectStore('restaurants' ,{keyPath: 'id'});\r\n              case 1:\r\n              upgradeDb.createObjectStore('reviews' ,{keyPath: 'restaurant_id'});\r\n              case 2:\r\n              upgradeDb.createObjectStore('oflineReviews' ,{keyPath: 'restaurant_id'});\r\n            }\r\n        });\r\n    }\r\n   /**\r\n    * Get Restaurants\r\n    */\r\n    static getCachedData() \r\n    {\r\n        if (!dbPromise) \r\n        {\r\n            dbPromise = DBHelper.openDB()\r\n        }\r\n        return dbPromise.then(function(db) \r\n        {\r\n            if (!db) \r\n            {\r\n                return;\r\n            }\r\n            var tx = db.transaction(\"restaurants\");\r\n            var store = tx.objectStore(\"restaurants\");\r\n            return store.getAll();\r\n        })\r\n    }\r\n   /**\r\n    * Get Reviews\r\n    */\r\n    static getCachedReviews()\r\n    {\r\n        if(!dbPromise)\r\n        {\r\n            dbPromise = DBHelper.openDatabase();\r\n        }\r\n        return dbPromise.then(function(db)\r\n        {\r\n            if(!db) return db;\r\n            var tx = db.transaction('reviews');\r\n            var store = tx.objectStore('reviews');\r\n            return store.getAll();\r\n        });\r\n    }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n    static fetchRestaurants(callback) \r\n    {\r\n        DBHelper.getCachedData().then(function(data) \r\n        {\r\n            if (data.length > 0 && !navigator.onLine) \r\n            {\r\n              return callback(null, data)\r\n            }\r\n            fetch(DBHelper.DATABASE_URL+`restaurants`, {credentials:\"same-origin\"}).then(rest => rest.json()).then(data => {\r\n                dbPromise.then(function(db) \r\n                {\r\n                    if (!db) {return;}\r\n\r\n                    var tx = db.transaction('restaurants', 'readwrite');\r\n                    var store = tx.objectStore('restaurants');\r\n\r\n                    data.forEach(restaurant => store.put(restaurant));\r\n\r\n                    //limit the data for 50\r\n                    store.openCursor(null, 'prev').then(function(cur) \r\n                    {\r\n                        return cur.advance(50);\r\n                    }).then(function delRest(cur) \r\n                    {\r\n                        if (!cur) {return;}\r\n                        cur.delete();\r\n                        return cur.continue().then(delRest)\r\n                    });\r\n                });\r\n                return callback(null, data);\r\n            }).catch(err =>{return callback(err, null)});\r\n        });\r\n    }\r\n\r\n   /**\r\n    * Fetch reviews by restaurant id\r\n    */\r\n    static fetchReviewsById(id)\r\n    {\r\n        return new Promise((resolve, reject) =>\r\n        {\r\n            DBHelper.getCachedReviews().then(function(data)\r\n            {        \r\n                // if reviews are cached show them otherwide get from server\r\n                if(data.length > 0 && !navigator.onLine)\r\n                {\r\n                  resolve(data[0]);\r\n                }\r\n                //fetch from server         \r\n                fetch(`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${id}`).then(response => \r\n                {\r\n                    if(response.ok)\r\n                    {\r\n                        return response.json();\r\n                    }\r\n                    reject(new Error(`Request failed, status code: ${response.status}`));\r\n                }).then(data =>\r\n                {\r\n\r\n                    DBHelper.updateReview(data);\r\n                    resolve(data);\r\n                })\r\n            });\r\n        });\r\n    }\r\n\r\n   /**\r\n    * Update single review of restaurant\r\n    */\r\n    static updateReview(reviews)\r\n    {\r\n        if (!dbPromise) \r\n        {\r\n            dbPromise = DBHelper.openDB()\r\n        }\r\n\r\n        dbPromise.then(function(db)\r\n        {\r\n\r\n            if(!db) return db;\r\n            var tx = db.transaction('reviews' , 'readwrite');\r\n            var store = tx.objectStore('reviews');\r\n            if(reviews.length > 0)\r\n            {\r\n                reviews.restaurant_id = parseInt(reviews[0].restaurant_id);\r\n                store.put(reviews);\r\n            }\r\n            return tx.complete;\r\n        })\r\n    }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n    static fetchRestaurantById(id, callback) \r\n    {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => \r\n        {\r\n          if (error) \r\n          {\r\n            callback(error, null);\r\n          } \r\n          else \r\n          {\r\n            const restaurant = restaurants.find(r => r.id == id);\r\n            if (restaurant) \r\n            { // Got the restaurant\r\n              callback(null, restaurant);\r\n            } \r\n            else \r\n            { // Restaurant does not exist in the database\r\n              callback('Restaurant does not exist', null);\r\n            }\r\n          }\r\n        });\r\n    }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n    static fetchRestaurantByCuisine(cuisine, callback) \r\n    {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => \r\n        {\r\n            if (error) \r\n            {\r\n                callback(error, null);\r\n            } \r\n            else \r\n            {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) \r\n    {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => \r\n        {\r\n            if (error) \r\n            {\r\n                callback(error, null);\r\n            } \r\n            else \r\n            {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) \r\n            {\r\n                callback(error, null);\r\n            } \r\n            else \r\n            {\r\n                let results = restaurants\r\n                if (cuisine != 'all') \r\n                { \r\n                    // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all')\r\n                { \r\n                    // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) =>\r\n        {\r\n            if (error) \r\n            {\r\n                callback(error, null);\r\n            } \r\n            else\r\n            {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n   /**\r\n    * Adds of removes favourites\r\n    */\r\n    static addRemFav(restId, fav, rest, tooltip)\r\n    {\r\n        const isFav = rest.is_favorite;\r\n        DBHelper.handleFav(isFav, restId, rest).then(function()\r\n        {\r\n            if (fav.classList.contains('isNotFav')) \r\n            {\r\n                fav.classList.replace('isNotFav' , 'isFav');\r\n                fav.setAttribute('aria-label', \"Remove favourites\");\r\n                fav.setAttribute('aria-checked' , \"true\");\r\n                tooltip.innerHTML = \"Remove from favourites\"\r\n            }\r\n            else\r\n            {\r\n                fav.classList.replace('isFav' , 'isNotFav');\r\n                fav.setAttribute('aria-label', \"Add to favourite\");\r\n                fav.setAttribute('aria-checked' , \"false\");\r\n                tooltip.innerHTML = 'Add to favourites';\r\n            }\r\n        })\r\n    }\r\n\r\n   /**\r\n    * Stores review ofline if not online\r\n    */\r\n    static storeOflineReview(restId, name, reviewBody, rating)\r\n    {\r\n        const post = {restaurant_id: restId , name: name , rating: rating , comments: reviewBody };\r\n\r\n        if (!dbPromise) \r\n        {\r\n            dbPromise = DBHelper.openDB()\r\n        }\r\n\r\n        dbPromise.then(function(db)\r\n        {\r\n            if(!db) return;\r\n            var tx = db.transaction('oflineReviews' , 'readwrite' );\r\n            var store = tx.objectStore('oflineReviews');\r\n            store.put(post);\r\n            return tx.complete;\r\n        })\r\n    }\r\n\r\n   /**\r\n    * Adds favourites to DB and idb\r\n    */\r\n    static handleFav(isFav, restId, rest)\r\n    {\r\n        if(typeof(isFav) == 'string')\r\n        {    \r\n            if (isFav == 'false') \r\n            {\r\n                isFav = true;\r\n                rest.is_favorite = true;\r\n            }\r\n            else if (isFav == 'true') \r\n            {\r\n                isFav = false;\r\n                rest.is_favorite = false;\r\n            }\r\n        }\r\n        else\r\n        {\r\n          isFav = !isFav; \r\n        }\r\n\r\n        if (!dbPromise) \r\n        {\r\n            dbPromise = DBHelper.openDB()\r\n        }\r\n\r\n        dbPromise.then(function(db) \r\n        {\r\n            if (db) \r\n            {\r\n                return;\r\n            }\r\n            var tx = db.transaction(\"restaurants\", \"readwrite\");\r\n            var store = tx.objectStore(\"restaurants\");\r\n            store.put(rest);\r\n            return tx.complete;\r\n        })\r\n\r\n        return new Promise((resolve , reject) => \r\n        {\r\n            fetch(`${DBHelper.DATABASE_URL}restaurants/${restId}/?is_favorite=${isFav}`, \r\n            {\r\n                method: 'PUT'\r\n            }).then((res) => \r\n            {\r\n                if(res.ok)\r\n                { \r\n                    return res.json();\r\n                }\r\n                else\r\n                {\r\n                    reject(new Error(`Request is not successful. Status code is :  ${res.status}`));\r\n                }\r\n            }).then((data) => \r\n            {\r\n                resolve(data);     \r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    static postReview(restId , name , rating , reviewBody , reviews)\r\n    {\r\n        let post = {};\r\n        if(typeof(rating) == 'string')\r\n        {\r\n            post = {restaurant_id: restId , name: name , rating: reviewBody , comments: rating};\r\n        }\r\n        else\r\n        {\r\n            post = {restaurant_id: restId , name: name , rating: rating , comments: reviewBody};\r\n        }\r\n        return new Promise((resolve , reject) => \r\n        {\r\n            fetch(`${DBHelper.DATABASE_URL}reviews` , \r\n            {\r\n                method: 'POST',\r\n                body: JSON.stringify(post)\r\n            }).then(function(response)\r\n            {\r\n                if(response.ok)\r\n                {\r\n                    return response.clone().json();\r\n                }\r\n                reject(new Error(`Request failed with status code : ${response.status}`));\r\n            }).then(data => \r\n            {\r\n                reviews.push(data);\r\n                DBHelper.updateReview(reviews);\r\n                resolve(data);\r\n            });\r\n        });\r\n    }\r\n\r\n    static postOflineReview(restId, reviews)\r\n    {\r\n        return new Promise((resolve,reject) => \r\n        {\r\n            if(!dbPromise)\r\n            {\r\n                dbPromise = DBHelper.openDB();\r\n            }\r\n            dbPromise.then(function(db)\r\n            {\r\n                if(!db) return;\r\n                var tx = db.transaction('oflineReviews');\r\n                var store = tx.objectStore('oflineReviews');\r\n                return store.get(restId);\r\n            }).then(function(review)\r\n            {\r\n            DBHelper.postReview(review.restaurant_id , review.name , review.rating , review.comments , reviews).then(data => \r\n            {\r\n                dbPromise.then(function(db)\r\n                {\r\n                    var tx = db.transaction('oflineReviews',  'readwrite');\r\n                    var store = tx.objectStore('oflineReviews');\r\n                    store.delete(restId);\r\n                    return tx.complete;\r\n                });\r\n                resolve(data);\r\n            });\r\n            });\r\n        });\r\n    }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/imgRes/${restaurant.photograph}-`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image alt text.\r\n   */\r\n  static imageAltForRestaurant(restaurant) {\r\n    return (`${restaurant.alt}`);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Aria Label for the buttons\r\n   */\r\n   static buttonLabel(restaurant){\r\n    return restaurant.bLabel;\r\n   }\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}